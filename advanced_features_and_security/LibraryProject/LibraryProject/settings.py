"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n^mb!shgdgrc#mub$0rpaq54wdd3uejbv+2nk6$oa34+61#b0g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# Settings to increase security of the application
# https://docs.djangoproject.com/en/5.0/ref/middleware/#module-django.middleware.security

# Enable the browser's XSS filtering protection
# https://docs.djangoproject.com/en/5.0/ref/clickjacking/#setting-x-frame-options
SECURE_BROWSER_XSS_FILTER=True

# Clickjacking protection: https://docs.djangoproject.com/en/5.0/ref/clickjacking/#module-django.middleware.clickjacking
# This is the default setting. It prevents the response from being served in a
# frame in a web page of a different origin than the site the request came from.
# If you need to allow the website to be framed, set this to one of the other
# values: 'SAMEORIGIN', 'ALLOW-FROM https://example.com/'
X_FRAME_OPTIONS='DENY'

# Enable the "Content-Security-Policy" header. This helps to prevent certain
# types of attacks, like cross-site scripting (XSS) and data injection attacks.
# https://docs.djangoproject.com/en/5.0/ref/middleware/#module-django.middleware.security
SECURE_CONTENT_TYPE_NOSNIFF=True

# Enable the secure flag for the CSRF cookie. This will prevent the cookie from
# being transmitted over an unencrypted channel.
# https://docs.djangoproject.com/en/5.0/ref/settings/#csrf-cookie-secure
CSRF_COOKIE_SECURE=True

# Enable the secure flag for the session cookie. This will prevent the cookie
# from being transmitted over an unencrypted channel.
# https://docs.djangoproject.com/en/5.0/ref/settings/#session-cookie-secure
# Enable the secure flag for the session cookie. This will prevent the cookie
# from being transmitted over an unencrypted channel.
# https://docs.djangoproject.com/en/5.0/ref/settings/#session-cookie-secure
SESSION_COOKIE_SECURE=True

# Redirect all requests to HTTPS. This is the default setting.
# https://docs.djangoproject.com/en/5.0/ref/settings/#secure-ssl-redirect
SECURE_SSL_REDIRECT=True

# Enable the "HTTP Strict Transport Security" header. This helps to prevent
# certain types of attacks, like man-in-the-middle (MITM) attacks.
# https://docs.djangoproject.com/en/5.0/ref/middleware/#module-django.middleware.security
# Note that this is only applied when the request is on HTTPS.
# https://docs.djangoproject.com/en/5.0/ref/settings/#secure-hsts-seconds
SECURE_HSTS_SECONDS=31536000

# Include subdomains in the HSTS header. This is the default setting.
# https://docs.djangoproject.com/en/5.0/ref/settings/#secure-hsts-include-subdomains
SECURE_HSTS_INCLUDE_SUBDOMAINS=True

# Enable the "preload" option for the HSTS header. This allows the browser to
# preload the HSTS header, so that it is applied to all requests to the site,
# even if the request is not over HTTPS.
# https://docs.djangoproject.com/en/5.0/ref/settings/#secure-hsts-preload
SECURE_HSTS_PRELOAD=True


# This setting is used to detect if the request is coming in over HTTPS.
# https://docs.djangoproject.com/en/5.0/ref/settings/#secure-proxy-ssl-header
# When using a reverse proxy, the request is coming in over the proxy, not
# directly from the client. This setting allows us to detect if the request is
# coming in over HTTPS, even if the client is not directly connecting to the
# Django server.
# The value should be a tuple of HTTP header names. The value of the header
# should be the protocol used by the client to connect to the proxy. For
# example, if the client is using HTTPS to connect to the proxy, the header
# should have the value "https".
# The default value is ("HTTP_X_FORWARDED_PROTO",), which is the name of the
# header that is commonly used by reverse proxies to indicate the protocol
# used by the client.
# You can set this value to a different tuple if your reverse proxy is using
# a different header name.
SECURE_PROXY_SSL_HEADER=("HTTP_X_FORWARDED_PROTO")


ALLOWED_HOSTS = []




# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf.apps.BookshelfConfig',
    'relationship_app.apps.RelationshipAppConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
]

CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", 'https://trusted.cdn.com')
CSP_STYLE_SRC = ("'self'", 'https://trusted.cdn.com')
ROOT_URLCONF = 'LibraryProject.urls'
AUTH_USER_MODEL = 'bookshelf.CustomUser'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
